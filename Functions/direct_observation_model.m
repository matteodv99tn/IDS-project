function [g, G_q, G_l] = direct_observation_model(manipulator, land)
    % Direct observation model of the features, i.e. the observation that the camera should 
    % observe given a manipulator and the landmark position (in ground reference frame).
    % Furthermore, the function might return the jacobian of such function with respect to both 
    % robot and landmark values.
    %
    % All computations are generated by Maple.

    q1     = manipulator.q_true(1);
    q2     = manipulator.q_true(2);
    q3     = manipulator.q_true(3);
    L1     = manipulator.L1;
    L2     = manipulator.L2;
    x_land = land(1);
    y_land = land(2);

    % Direct observation equation
    t1 = -xo + x_land;
    t2 = cos(q1);
    t4 = -yo + y_land;
    t5 = sin(q1);
    t8 = cos(q2);
    t11 = -t1;
    t12 = t11 * t5;
    t13 = t2 * t4 + t12;
    t14 = sin(q2);
    t17 = cos(q3);
    t21 = -t4;
    t23 = t2 * t11 + t5 * t21 + L1;
    t25 = t8 * t13 + t23 * t14;
    t26 = sin(q3);
    res__1_1 = t17 * (t8 * (t2 * t1 + t5 * t4 - L1) + t14 * t13 - L2) + t26 * t25;
    res__2_1 = t26 * (t8 * t23 + t14 * (t2 * t21 - t12) + L2) + t17 * t25;
    g = zeros(2, 1);
    g(1, 1) = res__1_1;
    g(2, 1) = res__2_1;

    if nargout == 1 
        return;
    end 

    % Jacobian w.r.t. the robot joint configuration
    t1 = -yo + y_land;
    t2 = cos(q3);
    t4 = sin(q3);
    t5 = xo - x_land;
    t6 = t5 * t4;
    t8 = cos(q2);
    t11 = -t1;
    t13 = t11 * t4 + t2 * t5;
    t14 = sin(q2);
    t16 = t8 * (t2 * t1 + t6) + t14 * t13;
    t17 = cos(q1);
    t23 = t8 * t13 + (t2 * t11 - t6) * t14;
    t24 = sin(q1);
    res__1_1 = t17 * t16 + t24 * t23;
    t27 = t5 * t24;
    t28 = t17 * t1 + t27;
    t32 = t24 * t11 + t17 * t5 + L1;
    t34 = t2 * t28 + t32 * t4;
    t38 = t2 * t32 - t28 * t4;
    res__1_2 = t14 * t38 + t8 * t34;
    t44 = t8 * t32 + t14 * (t17 * t11 - t27) + L2;
    t48 = t32 * t14 + t8 * t28;
    res__1_3 = t2 * t48 + t4 * t44;
    res__2_1 = -t24 * t16 + t17 * t23;
    res__2_2 = -t34 * t14 + t8 * t38;
    res__2_3 = t2 * t44 - t4 * t48;
    G_q = zeros(2, 3);
    G_q(1, 1) = res__1_1;
    G_q(1, 2) = res__1_2;
    G_q(1, 3) = res__1_3;
    G_q(2, 1) = res__2_1;
    G_q(2, 2) = res__2_2;
    G_q(2, 3) = res__2_3;

    % Jacobian w.r.t. the landmark vector
    t1 = sin(q2);
    t2 = cos(q1);
    t4 = sin(q1);
    t5 = cos(q2);
    t7 = -t2 * t1 - t5 * t4;
    t8 = sin(q3);
    t12 = -t4 * t1 + t2 * t5;
    t13 = cos(q3);
    res__1_1 = t13 * t12 + t8 * t7;
    t16 = -t7 * t13;
    res__1_2 = t12 * t8 + t16;
    res__2_1 = -t12 * t8 - t16;
    res__2_2 = res__1_1;
    G_l = zeros(2, 2);
    G_l(1, 1) = res__1_1;
    G_l(1, 2) = res__1_2;
    G_l(2, 1) = res__2_1;
    G_l(2, 2) = res__2_2;
end
